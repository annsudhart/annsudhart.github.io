{"version":3,"sources":["components/Navbar/Navbar.js","components/Arrow/Arrow.js","components/Card/Card.js","components/CardContainer/CardContainer.js","pages/Home/Home.js","components/Carousel/Carousel.js","pages/CaseStudy/CaseStudy.js","pages/404/404.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","id","viewBox","fill","strokeMiterlimit","x1","y1","x2","y2","React","Component","Arrow","Card","props","text","CardContainer","Home","alt","src","style","target","sourceType","screenName","options","width","height","margin","async","charSet","xmlns","gradientTransform","offset","stopColor","fillOpacity","d","Carousel","useState","imageIndex","setImageIndex","onClick","imgList","length","console","log","CaseStudy","source","Page404","App","basename","exact","path","render","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f697764c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.scss';\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand\" href=\"\">\r\n                <a href=\"#\" className=\"navbar-brand navbar-item\">Andrea Sudharta</a>\r\n                <div className=\"menu-icon navbar-item\">\r\n                    <svg id=\"hamburger-icon\" viewBox=\"0 0 24 18\">\r\n                        <line fill=\"none\" strokeMiterlimit=\"10\" x1=\"0\" y1=\"2\" x2=\"24\" y2=\"2\"></line>\r\n                        <line fill=\"none\" strokeMiterlimit=\"10\" x1=\"0\" y1=\"9\" x2=\"24\" y2=\"9\"></line>\r\n                        <line fill=\"none\" strokeMiterlimit=\"10\" x1=\"0\" y1=\"16\" x2=\"24\" y2=\"16\"></line>\r\n                    </svg>\r\n                </div>\r\n                <ul>\r\n                    <li className=\"navbar-list navbar-item\"><a href=\"#about-me\">Projects</a></li>\r\n                    <li className=\"navbar-list navbar-item\"><a href=\"#more\">About Me</a></li>\r\n                    <li className=\"navbar-list navbar-item\"><a href=\"#contact\">Contact</a></li>\r\n                    <li className=\"navbar-list navbar-item\"><a href=\"resume.pdf\">Resume</a></li>\r\n                    <li className=\"navbar-list navbar-item\"><a href=\"https://github.com/annsudhart\">GitHub</a></li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Arrow.scss';\r\nclass Arrow extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"arrow-container\">\r\n                <a href=\"#about-me\">\r\n                    <div id=\"arrow\"></div>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Arrow;","import React from 'react';\r\nimport './Card.scss';\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <li>\r\n            <a  className=\"flex-item animated fadeInUp\"\r\n                id={props.id}\r\n                href={props.href}\r\n            >\r\n                {props.text}\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './CardContainer.scss';\r\nimport Card from '../Card/Card';\r\n\r\nfunction CardContainer(props) {\r\n    return (\r\n        <ul className=\"flex-container\">\r\n            <Card id=\"maze-rescue\" href=\"http://maze-rescue.com\" text=\"Maze Rescue\"/>\r\n            <Card id=\"truther-tweet\" href=\"https://github.com/annsudhart/truther-tweet\" text=\"US Politician+Twitter Analysis\"/>\r\n            <Card id=\"card-connect\" href=\"https://a10-cardconnect.herokuapp.com/\" text=\"Card Connect\"/>\r\n            <Card id=\"computing-paths\" href=\"http://computingpaths.ucsd.edu\" text=\"Computing Paths\"/>\r\n            <Card id=\"carbon-calc\" href=\"https://github.com/absambam/Carbon-Footprint-Calculator/\" text=\"Carbon Footprint Calculator\"/>\r\n            <Card id=\"any-a\" href=\"https://annsudhart.github.io/hackxx2018/\" text=\"ANY-A\"/>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default CardContainer;","import React from 'react';\r\nimport './Home.scss';\r\nimport Arrow from '../../components/Arrow/Arrow';\r\nimport CardContainer from '../../components/CardContainer/CardContainer';\r\nimport Card from '../../components/Card/Card';\r\nimport {TwitterTimelineEmbed} from 'react-twitter-embed';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"content\">\r\n        <section className=\"splash\">\r\n            <div className=\"splash-container\">\r\n            <div className=\"row\">\r\n                <div>\r\n                <h1>Welcome</h1>\r\n                <p>Nice to meet you. My name is Andrea Sudharta.</p>\r\n                <p className=\"learn-more\">Check out my work!</p>\r\n                <Arrow/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <img id=\"splashimg\" alt=\"\" src=\"/media/splash_image.svg\"/>\r\n            </div>\r\n            </div>\r\n        </section>\r\n        <section id=\"about-me\" className=\"about\">\r\n            <p>\r\n            Welcome to my webpage! I'm Andrea, a third year student in\r\n            UC San Diego studying Math-CS. My interests lie in the intersection\r\n            between <span style={{\"color\": \"rgb(80, 225, 200)\"}}>human computer interaction</span> and <span style={{\"color\": \"rgb(75, 75, 255)\"}}>data</span>. \r\n            Currently, I am a data programmer for the UCSD School of Medicine and will intern at Verizon Media over the summer.\r\n            </p>\r\n            <a target=\"_blank\" href=\"resume.pdf\" className=\"resume-btn\">\r\n            View my resume\r\n            </a>\r\n            <h2>Projects</h2>\r\n            <ul className=\"flex-container\">\r\n                <Card id=\"maze-rescue\" href=\"http://maze-rescue.com\" text=\"Maze Rescue\"/>\r\n                <Card id=\"truther-tweet\" href=\"/case-study/politician-tweet\" text=\"US Politician+Twitter Analysis\"/>\r\n                <Card id=\"card-connect\" href=\"https://a10-cardconnect.herokuapp.com/\" text=\"Card Connect\"/>\r\n                <Card id=\"computing-paths\" href=\"http://computingpaths.ucsd.edu\" text=\"Computing Paths\"/>\r\n                <Card id=\"carbon-calc\" href=\"https://github.com/absambam/Carbon-Footprint-Calculator/\" text=\"Carbon Footprint Calculator\"/>\r\n                <Card id=\"any-a\" href=\"https://annsudhart.github.io/hackxx2018/\" text=\"ANY-A\"/>\r\n            </ul>\r\n        </section>\r\n        <section id=\"moreDivider\" className=\"moreDivider\">\r\n            <h1>Community Involvement and More</h1>\r\n            <img alt=\"teamwork\" src=\"/media/community.svg\"/>\r\n            <p>\r\n            I am also striving to improve my leadership skills, whether if it is\r\n            as the chair of my college's residence hall council, or as an organizer\r\n            for SD Hacks, an annual hackathon at UC San Diego. Furthermore, I am attending \r\n            hackathons and technology related events in order to connect with \r\n            the tech world and improve my skills. I won first place \r\n            in HackXX 2018 and won best Google Cloud Hack at Rose Hack 2019.\r\n            </p>\r\n        </section>\r\n        <section className=\"more\">\r\n            <h2>Hackathons I've been to</h2>\r\n            <div className=\"hex-wrapper\">\r\n            <ul>\r\n                <li>\r\n                <div className=\"hexagon\" \r\n                    style={{\"backgroundImage\": \"url('/media/sdhacks-logo.svg')\"}}></div>\r\n                SDHacks 2018\r\n                </li>\r\n                <li>\r\n                <div className=\"hexagon\"\r\n                    style={{\"backgroundImage\": \"url('/media/hackxx-logo.svg')\", \"backgroundColor\": \"#941470\", \"backgroundSize\": \"70%\"}}></div>\r\n                HackXX 2018, 2019\r\n                </li>\r\n                <li>\r\n                <div className=\"hexagon\"\r\n                    style={{\"background\": \"url('/media/rosehack-logo.png'), #a588bf\", \"backgroundSize\": \"140%\"}}></div>\r\n                Rose Hack 2019\r\n                </li>\r\n                <li>\r\n                <div className=\"hexagon\"\r\n                    style={{\"backgroundImage\": \"url('/media/spectra-logo.png')\"}}></div>\r\n                Spectra 2.0\r\n                </li>\r\n            </ul>\r\n            </div>\r\n            <h2>Follow me on social media</h2>\r\n            <div className=\"twitter-frame\">\r\n            <TwitterTimelineEmbed\r\n                sourceType=\"profile\"\r\n                screenName=\"SudhartaAndrea\"\r\n                options={{width: 600, height: 800, margin: 20}}\r\n            />\r\n            </div>\r\n            <script async src=\"https://platform.twitter.com/widgets.js\" \r\n                    charSet=\"utf-8\"></script>\r\n        </section>\r\n        <div className=\"section-divider\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n            <defs>\r\n                <linearGradient id=\"contact-gradient\" gradientTransform=\"rotate(90)\">\r\n                <stop offset=\"0%\"  stopColor=\"#4b4bff\" />\r\n                <stop offset=\"30%\" stopColor=\"#9933ff\" />\r\n                <stop offset=\"100%\" stopColor=\"#ff66cc\" />\r\n                </linearGradient>\r\n            </defs>\r\n            <path fill=\"url('#contact-gradient')\" fillOpacity=\"1\" d=\"M0,64L30,80C60,96,120,128,180,154.7C240,181,300,203,360,208C420,213,480,203,540,176C600,149,660,107,720,112C780,117,840,171,900,213.3C960,256,1020,288,1080,298.7C1140,309,1200,299,1260,256C1320,213,1380,139,1410,101.3L1440,64L1440,0L1410,0C1380,0,1320,0,1260,0C1200,0,1140,0,1080,0C1020,0,960,0,900,0C840,0,780,0,720,0C660,0,600,0,540,0C480,0,420,0,360,0C300,0,240,0,180,0C120,0,60,0,30,0L0,0Z\"></path>\r\n            </svg>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, {useState} from 'react';\r\nimport './Carousel.scss';\r\nfunction Carousel(props) {\r\n    const [imageIndex, setImageIndex] = useState(0);\r\n    const flipLeft = () => {\r\n        setImageIndex((imageIndex - 1 + props.imgList.length) % props.imgList.length);\r\n        console.log(imageIndex);\r\n    }\r\n    \r\n    const flipRight = () => {\r\n        setImageIndex((imageIndex + 1) % props.imgList.length);\r\n        console.log(imageIndex);\r\n    }\r\n\r\n    return (\r\n        <div className=\"carousel\">\r\n            <div className=\"arrow\" onClick={flipLeft}>◀</div>\r\n            <img src={props.imgList[imageIndex]}/>\r\n            <div className=\"arrow\" onClick={flipRight}>▶</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel;","import React, { useState } from 'react';\r\nimport Markdown from 'react-markdown';\r\nimport Carousel from '../../components/Carousel/Carousel';\r\nimport './CaseStudy.scss';\r\n\r\nfunction CaseStudy() {\r\n  const mdString1 = \"# Politician Twitter Analysis\\r\\n\\r\\n![splash image](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/consistency-example.png?raw=true)\\r\\n\\r\\n## Overview\\/TLDR\\r\\n\\r\\nPoliticians often get a reputation for being corrupt and shady liars. But how much is that true, and how much of it is related to political party lines? With a group of nine other students, I set out to test American Congressmembers\\' trustworthiness by comparing whether the opinions and words politicians speak match their voting record. To do this, we gathered voting data on several Congressmen and Congresswomen to understand voting patterns and honesty in politicians. Then, we scanned the Twitter accounts of Congress members, taking key words and hashtags for hot topics, and compared their words against their voting patterns using sentiment analysis. Scores are then assigned to these politicians based on their \\u201Ctrustworthiness\\u201D - a representation of their viewpoint consistency, and we aggregated these scores in various ways to describe the two parties\\u2019 relationship with honesty.\\r\\n\\r\\nMy role in this project was compiling the Twitter URLs to scrape from and to combine the data and research from all of my partners into one document. I also helped to improve and create some of the data visualizations to make them easier to read and gain insights from.\\r\\n## Background\\r\\n![Pew Research on Trustworthiness Graph](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/politician-trust-graph-pew.png?raw=true)\\r\\nThe US government relies on its Congress to not only check the powers of the president and other branches of government but also to draft legislation that has an impact on our lives. With such important duties, it is disappointing to see that politicians are known to be one of the least trusted professions out there.\\r\\n\\r\\nFortunately, we have a way to directly engage with these politicians and evaluate for ourselves if these Congress members are performing a satisfactory job or not. With our primary sources of information transitioning from the newspaper, to the television, to now social media, politicians have increased their presence on Twitter to speak to their constituents and gain their support. So it follows that by using Twitter, we can see how they vote and what they believe in, and compare those with what we believe is right. This fact gives us a valuable source of data for our research.\\r\\n## Previous Research\\r\\n\\r\\nThere has been other research that sought to explore this topic. One study gave us the groundwork for studying political leanings based on language. In this study, data science and neural networking were leveraged to predict how Republicans or Democrats would vote on each bill. It looked at the language used by bills and party ideology, then categorized a bill using a sentiment analysis on keyword vectors against a partisan sponsor vector. The study\\u2019s model was able to predict 86% of votes correctly in the 2005\\u20132012 test set--a level of accuracy several percentage points better than previous state-of-the-art machine learning approaches.\\r\\n\\r\\nAlso, the study\\u2019s data model yields interesting insights regarding the relative ideological positions of prominent legislators. The legislator vectors from their model, for example, can be used as a proxy for legislator ideology. By looking at yes-and-no voting they found that most Democrats will most likely support the bill sponsored by their own party and have negative opinions on a Republican version. The opposite is true for the Republicans.\\r\\n\\r\\nIn other projects, researchers mainly researched Trump\\u2019s impact on politics. Since Trump\\u2019s introduction into politics, political analysts have seen a rise in highly contested claims accompanied by a defense of \\u2018fake news\\u2019 and \\u2018alternative facts\\u2019 against the president\\u2019s words. Other politicians have taken to such practices to spread their views and propaganda, and now we increasingly have to verify the information we obtain ourselves against the people we are supposed to trust.\\r\\n\\r\\n## Problem Statement\\/Research Question\\r\\nHow consistent are Congressmen\\/Congresswomen with the beliefs they state on Twitter and how they vote on various issues in Congress? Are both parties equally consistent in their views?\\r\\n## Hypothesis\\r\\nSay that a consistency score is how consistent a politician is with what they tweet and how they vote.\\r\\n\\r\\nH0: Both parties are equally consistent in their tweets and their voting pattern (they have the same consistency scores under 90% significant level). To clarify, the null hypothesis predicts that average consistency scores of Democratic and Republican members of Congress between tweets and voting behavior will be equal to a significance level of 90%. We predict that members of Congress will be mostly consistent between their tweets and their voting behavior, because of the easily accessible information that is available to the public (such as their voting ballots on [GovTrack.us](https:\\/\\/GovTrack.us).\\r\\n\\r\\nHA (Alternative hypothesis): The parties are not equally consistent in their tweets and their voting pattern (The parties do not have the same consistency scores under 90% significant level). In other words, the alternative hypothesis suggests that average consistency scores of Democratic and Republican members of Congress between tweets and voting behavior will not be equal to a significance level of 90%. This is also likely due to possible lack of accountability for transparency.\\r\\n\\r\\n## Data Analysis and Gathering\\r\\n\\r\\n### Data Cleaning\\r\\nThe first part of our data collection and cleaning was to get information on Congress members\\u2019 voting activity.\\r\\n\\r\\nThere is a website called GovTrack that records the votes made by Congress for different pieces of legislation. The ones we take into consideration are:\\r\\n-  [H.R. 16644: Save the Internet Act of 2019](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h167). This bill deals with Net Neutrality and restoring the open internet order of the Federal Communications Commision. Relevant hashtags: #SaveTheInternet and #NetNeutrality.\\r\\n-  [H.Res 271: Condemning the Trump Administration\\u2019s Legal Campaign to Take Away Americans\\u2019 Health Care](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h146) , which focuses on President Trump and the Affordable Care Act.\\r\\n-  [H.R. 7: Paycheck Fairness Act](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h134), which amends the Fair Labor Standards Act of 1938 to remedy the discrimination, in terms of wages, on the basis of sex. Relevant hashtags: #EqualPay, #EqualRightsAmmendment, #ERA, #women, #EqualRights, #GenderInequality.\\r\\n-  [H.R. 1: For the People Act of 2019](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h118), which was a vote to \\u201Cexpand Americans\\u2019 access to the ballot box, reduce the influence of big money in politics, and strengthen ethics rules for public servants, and for other purposes\\u201D. Relevant hashtags: #VotingRights, #ElectionIntegrity,#RiggedElections, #ForThePeople.\\r\\n-  [H.Res. 145: Requiring a background check for every firearm sale](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h91). This bill refers to the gun violence that has become quite ubiquitous in the country. This is a polarizing issue, where Congress members have been quite vocal in their opinions. Relevant hashtags: #GunControl, #2ndAmmendment, #NoGunControl, and #GunViolence.\\r\\n-  [S.J.Res. 7: A joint resolution to direct the removal of United States Armed Forces from hostilities in the Republic of Yemen that have not been authorized by Congress.](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h153). This bill was a vote on whether or not to withdraw troops from the proxy war in Yemen. Tweets containing the references to Yemen will be extracted and used for analysis.\\r\\n-  [H.R. 1585: Violence Against Women Reauthorization Act of 2019](https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h156). Tweets in regards to this topic will be found with the key words of this bill.\\r\\n-  [H.J.Res. 46: Relating to a national emergency declared by the President on February 15, 2019.](\\'https:\\/\\/www.govtrack.us\\/congress\\/votes\\/116-2019\\/h127\\') This bill condemns the national emergency Trump declared in January of 2019. Tweets mentioning Trump and the national security will be mined from Twitter.\\r\\n\\r\\nEach of these links go to a webpage with information on the votes and contains a link to a CSV with data on what each Congress member\\u2019s vote on the bill was and the Congress member\\u2019s state, district, name, and party. Based on this data, we simplify the data by creating a CSV in which each entry contains the information of a Congress member and their vote on a specific bill. In this step, concern was raised on whether these cleaning steps were properly done since many representatives did not vote on any of the bills. After careful inspection, it was deducted that many representatives were not voting on any of these bills, which is particularly interesting since the congress people were selected by how active and popular they are on Twitter.\\r\\n\\r\\nThe second part of our data collection was to scrape data off of Twitter. Since we chose to answer our data science question by selecting eight bills that were voted on in the 116th Congress, we filtered each representative\\u2019s Twitter history by only selecting Tweets that discerned one of the eight bills. This was executed by checking whether or not the Tweet contained key words from the bill or a particular hashtag, demonstrating support for or against the bill. The last step taken in cleaning this data was the removal of any non-English words in the Tweet, which was due to the Tweepy library failing to remove all HTML code in the text part of the tweet. Python\\u2019s string function: `isalpha()`was used to remove these invalid parts of the Tweet text.\\r\\n\\r\\n### Findings\\r\\nFirst, we perform sentiment analysis on the tweets we mined. We searched for keywords in the tweets that would indicate approval or disapproval for an issue. If those keywords do not exist, we utilize Google\\u2019s NLP Text Sentiment Analysis Cloud Tool to categorize the data into tweets that are for an issue or against it. Overall, this would be use to give a mean sentiment score between -1 (negative) and 1 (positive), and depending on the bill, if keywords do not give a clear indication on a view expressed in a tweet, this number will be multiplied by -1 to capture whether a Congressperson would vote for or against a bill. The mean score will be rounded to 1, 0, or -1 depending on whether the mean falls into the range (0.1, 1.0], [-0.1, 0.1], or [-1.0, 0.1).\\r\\n\\r\\n![Sentiment Analysis Code](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/sentiment-analysis-code.png?raw=true)\\r\\n\\r\\nThis step was particularly difficult to do since the NLP tool could only estimate the positivity and negativity of a tweet, and since many Congressmen and Congresswomen\\u2019s tweets on Twitter are of a negative tone, discerning their view on the topic was an interesting challenge albeit a critical limitation on the project. In fact, deducing the sentiment in regards to whether or not they approve or disapprove of a bill is a Natural Language Processing Task that leading Deep Learning Researchers are conducting their research on. The best we could do was searching for keywords\\/hashtags that would indicate the position expressed in a tweet; nevertheless, a stronger machine learning model or the addition of more keywords could help.\\r\\n\\r\\nWith these sentiment scores, we can now calculate the consistency scores for later. But for now, let us look at the voting patterns of the Congresspeople. Using our Twitter dataset, we found the tweets each politician made per issue\\/bill and counted them so that we could plot a histogram of each politician\\u2019s number of tweets on a bill.\\r\\n\\r\\nThe histograms show there are more people who tweet about Paycheck Fairness, Health care, and the For the People Act, and how there are less tweets about the Save the Internet Act overall (additionally, notice the higher ratio of tweets of Democrats to Republicans). \\r\\n\\r\\nWe can see outliers in each of these histograms, and the names of the outlier politicians can be found in the Jupyter Notebook; several things that can be done to extend this analysis are to see if \\r\\n- there are any politicians that tend to tweet more often than others, or not often at all\\r\\n- the outliers tend to follow party lines (eg do Democrats tend to be these outliers in certain issues?)\\r\\n- the above, but for those that tweet less\\/not at all\\r\\n\";\r\n\r\n  const mdString2 = \"Furthermore, the graph below shows that Democrats are more prolific tweeters than Republicans in general across all topics. This could be due to a gap in the demographics of Republican and Democrat politicians, as Democrats tend to be younger and have younger followers than Republicans.\\r\\n\\r\\n![Democrats Tweet more than Republicans Per Bill Chart](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/tweet-count-party.png?raw=true)\\r\\n\\r\\nSo now we get to answering the question we had at the beginning- how do these tweets relate to the voting patterns of these politicians? After loading the CSVs with votes for each politician, we compare whether their sentiment scores were positive or negative with whether they voted yes or no on an issue to create a \\u2018consistency score\\u2019.\\r\\n\\r\\n![Consistency Score code](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/consistency-score-code.png?raw=true)\\r\\n\\r\\n![Average Consistency Score By Bill Graph](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/consistency-score-by-bill.png?raw=true)\\r\\n\\r\\nThe average consistency scores are around or below 0.5, and even with those low scores Republicans are more consistent with their voting and tweeting patterns in comparison to Democrats who have lower overall consistency scores. In general though, there is a higher consistency score for Republicans compared to Democrats. \\r\\n\\r\\nInterestingly, the areas where the consistency scores are the lowest for Democrats are the Health Care Act and Violence Against Women Reauthorization Act, most likely due to the fact that our sentiment analysis was not able to pick up the fact that many Democrats used highly polarized language when discussing this issue. Furthermore, the Save the Internet Act and the Background Check for Firearms were where Republicans had the lowest consistency scores. It could be reflective of the language used for firearms, and tweets related to the Save the Internet Act are pretty low. \\r\\n\\r\\n![Average Consistency Score By Bill Graph](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/consistency-score-by-bill-party.png?raw=true)\";\r\n  const mdString3 = \"## Final Result\\r\\n\\r\\n![Example of Politician Twitter Consistency](https:\\/\\/github.com\\/annsudhart\\/annsudhart.github.io\\/blob\\/source\\/public\\/case-studies\\/images\\/consistency-example.png?raw=true)\\r\\n\\r\\nMain takeaways:\\r\\n- The data shows politicians are on average not too consistent with their votes and their tweets, and this tends to be more true for Democrats. \\r\\n- Our results should be taken with a grain of salt because of possible inaccuracies in sentiment analysis in determining a position held in a Tweet.\\r\\n- Many things can be done to improve this research study, as stated below in detail.\\r\\n\\r\\n### Ethics\\/Privacy\\r\\nIn order to web scrape Twitter for the tweet history of each congressman\\/woman, a Twitter Developer Account had to be requested from the company, and so we had permission to collect the Twitter data we needed to create the dataset, albeit with a restriction in the number of page requests made hourly. This restriction was circumvented with a sleep function when making the API calls. As for the GovTrack datasets, the unrestricted CSV files containing the votes on a bill from each House of Representatives are public records (since the transparency of representatives voting record is vital for maintaining a representative democracy) and no permission was needed.\\r\\n\\r\\nWorking on this type of problem involved various challenges in terms of answering our data science question without bias. To best represent the population we are studying we selected an even number of representatives from both the Democratic and Republican party; a systematic way of selecting which of the 435 politicians from the House of Representatives to use for analysis was specified (those with the most tweets and followers). \\r\\n\\r\\nAs for selecting which of the bills voted on in the House were used for analysis: the bills that had the most divide were used i.e. there was a near even split of votes. This method of selecting bills was advantageous since it avoided biasedly selecting bills introduced to the house disproportionately by one party. \\r\\n\\r\\nThere was a significant issue in terms of how to filter the Tweet data. The list of key words belonging to each bill were accumulated by taking key words in each of the bill statements and from analyzing the most popular results from searching each of the bills on Twitter. Whether or not Twitter has algorithm bias in their search results was out of the project\\u2019s scope of control; however, selecting the hashtags from these search results left room for human bias to unintendedly select a biased list of words and hashtags. This was a challenge to the project since the poor execution of the step would skew the data set by disproportionately containing tweets predominantly from one side of the vote. However, since this was an issue raised before curating this list of key-words, emphasis was placed on analyzing tweets from both parties.\\r\\n\\r\\n\\r\\n### Conclusion\\r\\nThe average consistency scores for all the politicians averaged around 40%. Though we consider the margin of error provided by possible inaccuracies from Google\\u2019s sentiment analysis of the tweets, it remains that we must reject the null hypothesis. The Democratic party has demonstrated a significantly lower consistency score at approximately 30% compared to the Republicans at approximately 60%. The most transparent and consistent politician would be Tom Graves (R), the only politician who had 100% consistency. The politician who abstains the most from voting would be Kay Granger (R).\\r\\n\\r\\nIt is highly probable yet hard to calculate how drastic the effect of inaccurate sentiment analysis is on our consistency scores. An interesting finding I found in retrospect was that along party lines, the number of tweets correlates with the consistency scores by party and bill. It is possible it had a role in affecting the outcome of our hypothesis, artificially lowering the consistency of Democratic politicians in addition to the unequal balance of Democratic and Republican politician tweet counts. Looking at the example of the Violence Against Women Act and how low Democratic consistency is, a case can be argued that perhaps Google Sentiment Analysis misinterpreted impassioned language in support of VAWA as negative. So even though the literal content of the tweets would be consistent with the votes, our scoring system is limited by the sentiment analysis technology available to us.\\r\\n\\r\\nUltimately, our evaluations cannot purport to be the end all be all of character analysis for the included politicians. Our analysis represents whether or not the politicians were consistent between their stated views and the votes they ultimately cast. It does not pass judgement on the morality of the views and votes themselves, and does not let our individual viewpoints affect how the consistency score is calculated. The analysis we have done can only go so far, and does not make a broader moral judgement on the content of the politicians\\u2019 votes. Tom Graves may be the only one under our metric who scores 100%, but it is not an endorsement of his viewpoints. The same can be said for all the politicians in the study. Acknowledging this is especially important because of how contentious opposing political viewpoints can be. We wish to recognize that party bias is not reflected in the measurements we have created\\u2014that this study has focused on checking uniformity between a politician\\u2019s public image and their political actions.\\r\\n### Possible Improvements and Reflections\\r\\nRevisiting this project a year after its conclusion, there are many steps that can be taken to improve this. \\r\\n- Fine-tune the sentiment analysis by adding more relevant keywords that could better determine the sentiment of the politician on an issue. Perhaps studying selected tweets and the output given by our sentiment analysis could fix this.\\r\\n- Further discuss the visualizations we made. This is actually a current work in progress as I revisit this project. We made plenty of visualizations, but I believe more could be discussed about the stories the visualizations make - the findings from the graphs we made were stated, but it would be interesting to explore the meaning behind those findings.\\r\\n- Enhance the study with a statistically-oriented discussion. We discussed a null and alternative hypothesis, but after taking more statistics classes, it would be interesting to see if an actual two-proportion z-test can be performed on the mean consistency levels along party lines.\\r\\n\\r\\nExploring sentiment analysis and web scraping with this project as a beginner with a large group, pulling off a study like this was a challenge, but ultimately I learned a lot about the applications of this area of data science.\\r\\n## References\\r\\n1. [https:\\/\\/www.forbes.com\\/sites\\/niallmccarthy\\/2019\\/01\\/11\\/americas-most-least-trusted-professions-infographic\\/#195b387c7e94](https:\\/\\/www.forbes.com\\/sites\\/niallmccarthy\\/2019\\/01\\/11\\/americas-most-least-trusted-professions-infographic\\/#195b387c7e94)\\r\\n2. [https:\\/\\/link.springer.com\\/chapter\\/10.1007\\/978-981-10-8013-5_7](https:\\/\\/link.springer.com\\/chapter\\/10.1007\\/978-981-10-8013-5_7)\\r\\n3. [https:\\/\\/arxiv.org\\/abs\\/1805.08182](https:\\/\\/arxiv.org\\/abs\\/1805.08182)\\r\\n4. [https:\\/\\/www.govtrack.us\\/congress\\/votes](https:\\/\\/www.govtrack.us\\/congress\\/votes)\\r\\n5. [https:\\/\\/www.people-press.org\\/2019\\/04\\/11\\/public-trust-in-government-1958-2019\\/](https:\\/\\/www.people-press.org\\/2019\\/04\\/11\\/public-trust-in-government-1958-2019\\/)\\r\\n\"\r\n  \r\n  const imagesList = [\r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-1.png', \r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-2.png',\r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-3.png',\r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-4.png', \r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-5.png',\r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-6.png',\r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-7.png', \r\n    'https://raw.githubusercontent.com/annsudhart/annsudhart.github.io/source/public/case-studies/images/tweets-per-bill-8.png',];\r\n  \r\n  return (\r\n    <div className=\"case-study\">\r\n      <Markdown source={mdString1}/>\r\n      <Carousel imgList={imagesList}/>\r\n      <Markdown source={mdString2}/>\r\n      <Markdown source={mdString3}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CaseStudy;\r\n","import React from 'react';\r\n\r\nfunction Page404() {\r\n  return (\r\n    <div className=\"App\">\r\n        404 - Page not Found\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page404;\r\n","import React from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport './App.scss';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Home from './pages/Home/Home';\r\nimport CaseStudy from './pages/CaseStudy/CaseStudy';\r\nimport Page404 from './pages/404/404';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename='/'>\r\n        <Navbar/>\r\n        <Switch>\r\n          <Route exact path=\"/case-study/politician-tweet\" render={CaseStudy}/>\r\n          <Route exact path=\"/\" render={Home}></Route>\r\n          <Route render={Page404}/>\r\n        </Switch>\r\n      </HashRouter>      \r\n      <section id=\"contact\" className=\"contact\">\r\n            <h2>Contact</h2>\r\n            <ul>\r\n            <li>\r\n                <a href=\"mailto:sudharta.andrea@gmail.com\">\r\n                <i className=\"contact-icon fas fa-envelope\" alt=\"email symbol\"></i>\r\n                Email: sudharta.andrea@gmail.com\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a href=\"https://www.linkedin.com/in/andrea-sudharta/\">\r\n                <i className=\"contact-icon fab fa-linkedin-in\"  alt=\"linkedin symbol\"></i>\r\n                LinkedIn: andrea-sudharta\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a href=\"https://github.com/annsudhart\">\r\n                <i className=\"contact-icon fab fa-github\"  alt=\"github symbol\"></i>\r\n                GitHub: annsudhart\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a href=\"https://twitter.com/SudhartaAndrea\">\r\n                <i className=\"contact-icon fab fa-twitter\"  alt=\"twitter symbol\"></i>\r\n                Twitter: @SudhartaAndrea\r\n                </a>\r\n            </li>\r\n            </ul>\r\n            <p>Made with <span role=\"img\" aria-label=\"care\">💙</span> and <span role=\"img\" aria-label=\"tacos\">🌮</span> using ReactJS. No robots were harmed in the creation of this website ✌️</p>\r\n        </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}